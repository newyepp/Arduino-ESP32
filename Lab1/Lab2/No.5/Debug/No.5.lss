
No.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f5  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024f  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000354  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ef  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

uint64_t volatile __millis=0;
ISR (TIMER2_COMPA_vect){__millis++;}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  b8:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  bc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
  c0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
  c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
  c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
  cc:	a1 e0       	ldi	r26, 0x01	; 1
  ce:	0e 94 01 01 	call	0x202	; 0x202 <__adddi3_s8>
  d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
  e6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
  ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
  ee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <init_timer2>:
	
void init_timer2(){
	TCCR2B=(1<<CS22); //System divided by 64 (CLK/64).
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCCR2A|=(1<<WGM21); //autoreload, TCNT2 reset to 0 when reaches OCR2A
 114:	e0 eb       	ldi	r30, 0xB0	; 176
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	TIMSK2=(1<<OCIE2A); //enable interrupt.
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TIFR2=(1<<OCF2A); //clear flag
 124:	87 bb       	out	0x17, r24	; 23
	TCNT2=0x00; //reset counter2
 126:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A=249; //output compare register A (compare value)
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 130:	08 95       	ret

00000132 <main>:
	//initialize timer2, interupt every (1/16000000)*64*1000*(249+1) = 1ms
}

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0x8>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	uint64_t o_time1,n_time1;
	DDRC=0xFF; // PortC >> output
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	87 b9       	out	0x07, r24	; 7
	sei();
 142:	78 94       	sei
	init_timer2();
 144:	0e 94 87 00 	call	0x10e	; 0x10e <init_timer2>
	o_time1=__millis;
 148:	20 90 00 01 	lds	r2, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	30 90 01 01 	lds	r3, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 154:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 158:	60 90 04 01 	lds	r6, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 15c:	70 90 05 01 	lds	r7, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 160:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 164:	19 83       	std	Y+1, r17	; 0x01
 166:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 16a:	8a 83       	std	Y+2, r24	; 0x02
	n_time1=__millis;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 178:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 17c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 180:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 184:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 188:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
	
	while (1) {
		n_time1=__millis ;
 18c:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 198:	1c 83       	std	Y+4, r17	; 0x04
 19a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 19e:	8b 83       	std	Y+3, r24	; 0x03
 1a0:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 1a4:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 1a8:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 1ac:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
		if(n_time1-o_time1>150){
 1b0:	28 2d       	mov	r18, r8
 1b2:	39 2d       	mov	r19, r9
 1b4:	41 2f       	mov	r20, r17
 1b6:	58 2f       	mov	r21, r24
 1b8:	6b 2f       	mov	r22, r27
 1ba:	7a 2f       	mov	r23, r26
 1bc:	8f 2f       	mov	r24, r31
 1be:	9e 2f       	mov	r25, r30
 1c0:	a2 2c       	mov	r10, r2
 1c2:	b3 2c       	mov	r11, r3
 1c4:	c4 2c       	mov	r12, r4
 1c6:	d5 2c       	mov	r13, r5
 1c8:	e6 2c       	mov	r14, r6
 1ca:	f7 2c       	mov	r15, r7
 1cc:	09 81       	ldd	r16, Y+1	; 0x01
 1ce:	1a 81       	ldd	r17, Y+2	; 0x02
 1d0:	0e 94 0d 01 	call	0x21a	; 0x21a <__subdi3>
 1d4:	26 39       	cpi	r18, 0x96	; 150
 1d6:	31 05       	cpc	r19, r1
 1d8:	41 05       	cpc	r20, r1
 1da:	51 05       	cpc	r21, r1
 1dc:	61 05       	cpc	r22, r1
 1de:	71 05       	cpc	r23, r1
 1e0:	81 05       	cpc	r24, r1
 1e2:	91 05       	cpc	r25, r1
 1e4:	99 f2       	breq	.-90     	; 0x18c <main+0x5a>
 1e6:	90 f2       	brcs	.-92     	; 0x18c <main+0x5a>
			PORTC^=(1<<5); // LED1
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	89 27       	eor	r24, r25
 1ee:	88 b9       	out	0x08, r24	; 8
			o_time1=n_time1;
 1f0:	28 2c       	mov	r2, r8
 1f2:	39 2c       	mov	r3, r9
 1f4:	4c 80       	ldd	r4, Y+4	; 0x04
 1f6:	5b 80       	ldd	r5, Y+3	; 0x03
 1f8:	6b 2e       	mov	r6, r27
 1fa:	7a 2e       	mov	r7, r26
 1fc:	f9 83       	std	Y+1, r31	; 0x01
 1fe:	ea 83       	std	Y+2, r30	; 0x02
 200:	c5 cf       	rjmp	.-118    	; 0x18c <main+0x5a>

00000202 <__adddi3_s8>:
 202:	00 24       	eor	r0, r0
 204:	a7 fd       	sbrc	r26, 7
 206:	00 94       	com	r0
 208:	2a 0f       	add	r18, r26
 20a:	30 1d       	adc	r19, r0
 20c:	40 1d       	adc	r20, r0
 20e:	50 1d       	adc	r21, r0
 210:	60 1d       	adc	r22, r0
 212:	70 1d       	adc	r23, r0
 214:	80 1d       	adc	r24, r0
 216:	90 1d       	adc	r25, r0
 218:	08 95       	ret

0000021a <__subdi3>:
 21a:	2a 19       	sub	r18, r10
 21c:	3b 09       	sbc	r19, r11
 21e:	4c 09       	sbc	r20, r12
 220:	5d 09       	sbc	r21, r13
 222:	6e 09       	sbc	r22, r14
 224:	7f 09       	sbc	r23, r15
 226:	80 0b       	sbc	r24, r16
 228:	91 0b       	sbc	r25, r17
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
