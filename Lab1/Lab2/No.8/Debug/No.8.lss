
No.8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000713  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028b  00000000  00000000  000011d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032e  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
#include <avr/io.h>
#include <avr/interrupt.h>


uint64_t volatile __millis=0;
ISR (TIMER2_COMPA_vect){__millis++;}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  b8:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  bc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
  c0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
  c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
  c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
  cc:	a1 e0       	ldi	r26, 0x01	; 1
  ce:	0e 94 94 01 	call	0x328	; 0x328 <__adddi3_s8>
  d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
  e6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
  ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
  ee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <init_timer2>:

void init_timer2(){
	TCCR2B=(1<<CS22); //System divided by 64 (CLK/64).
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCCR2A|=(1<<WGM21); //autoreload, TCNT2 reset to 0 when reaches OCR2A
 114:	e0 eb       	ldi	r30, 0xB0	; 176
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	TIMSK2=(1<<OCIE2A); //enable interrupt.
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TIFR2=(1<<OCF2A); //clear flag
 124:	87 bb       	out	0x17, r24	; 23
	TCNT2=0x00; //reset counter2
 126:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A=249; //output compare register A (compare value)
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 130:	08 95       	ret

00000132 <main>:
	//initialize timer2, interupt every (1/16000000)*64*1000*(249+1) = 1ms
}

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	64 97       	sbiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	uint64_t o_time1,n_time1,o_time2,n_time2;
	DDRC=0xFF; // output led
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 b9       	out	0x07, r24	; 7
	sei();
 14a:	78 94       	sei
	init_timer2();
 14c:	0e 94 87 00 	call	0x10e	; 0x10e <init_timer2>
	o_time1=__millis;
 150:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	1b 83       	std	Y+3, r17	; 0x03
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15a:	8c 83       	std	Y+4, r24	; 0x04
 15c:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 160:	1d 83       	std	Y+5, r17	; 0x05
 162:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 166:	8e 83       	std	Y+6, r24	; 0x06
 168:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 16c:	1f 83       	std	Y+7, r17	; 0x07
 16e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 172:	88 87       	std	Y+8, r24	; 0x08
 174:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 178:	19 87       	std	Y+9, r17	; 0x09
 17a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 17e:	8a 87       	std	Y+10, r24	; 0x0a
	n_time1=__millis;
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 190:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 194:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 198:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 19c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
	o_time2=__millis;
 1a0:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a4:	1b 87       	std	Y+11, r17	; 0x0b
 1a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	8c 87       	std	Y+12, r24	; 0x0c
 1ac:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b0:	1d 87       	std	Y+13, r17	; 0x0d
 1b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b6:	8e 87       	std	Y+14, r24	; 0x0e
 1b8:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 1bc:	1f 87       	std	Y+15, r17	; 0x0f
 1be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 1c2:	88 8b       	std	Y+16, r24	; 0x10
 1c4:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 1c8:	19 8b       	std	Y+17, r17	; 0x11
 1ca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 1ce:	8a 8b       	std	Y+18, r24	; 0x12
	n_time2=__millis;
 1d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1dc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 1e4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 1e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 1ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
	PORTC |= (1<<4);      //LED2 on
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<<5);     //LED1  on
 1f6:	88 b1       	in	r24, 0x08	; 8
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	88 b9       	out	0x08, r24	; 8
	while (1) {
		n_time1=__millis ;
 1fc:	20 90 00 01 	lds	r2, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	30 90 01 01 	lds	r3, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 204:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 208:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 20c:	60 90 04 01 	lds	r6, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 210:	70 90 05 01 	lds	r7, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 214:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 218:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
		n_time2=__millis ;
 21c:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 220:	1c 8b       	std	Y+20, r17	; 0x14
 222:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 226:	8b 8b       	std	Y+19, r24	; 0x13
 228:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 22c:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 230:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 234:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 238:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 23c:	19 83       	std	Y+1, r17	; 0x01
 23e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 242:	8a 83       	std	Y+2, r24	; 0x02
		if(n_time1-o_time1>150){  //LED 1 on and off
 244:	22 2d       	mov	r18, r2
 246:	33 2d       	mov	r19, r3
 248:	44 2d       	mov	r20, r4
 24a:	55 2d       	mov	r21, r5
 24c:	66 2d       	mov	r22, r6
 24e:	77 2d       	mov	r23, r7
 250:	88 2d       	mov	r24, r8
 252:	99 2d       	mov	r25, r9
 254:	ab 80       	ldd	r10, Y+3	; 0x03
 256:	bc 80       	ldd	r11, Y+4	; 0x04
 258:	cd 80       	ldd	r12, Y+5	; 0x05
 25a:	de 80       	ldd	r13, Y+6	; 0x06
 25c:	ef 80       	ldd	r14, Y+7	; 0x07
 25e:	f8 84       	ldd	r15, Y+8	; 0x08
 260:	09 85       	ldd	r16, Y+9	; 0x09
 262:	1a 85       	ldd	r17, Y+10	; 0x0a
 264:	0e 94 a0 01 	call	0x340	; 0x340 <__subdi3>
 268:	26 39       	cpi	r18, 0x96	; 150
 26a:	31 05       	cpc	r19, r1
 26c:	41 05       	cpc	r20, r1
 26e:	51 05       	cpc	r21, r1
 270:	61 05       	cpc	r22, r1
 272:	71 05       	cpc	r23, r1
 274:	81 05       	cpc	r24, r1
 276:	91 05       	cpc	r25, r1
 278:	69 f0       	breq	.+26     	; 0x294 <main+0x162>
 27a:	60 f0       	brcs	.+24     	; 0x294 <main+0x162>
			PORTC^=(1<<5);
 27c:	98 b1       	in	r25, 0x08	; 8
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	89 27       	eor	r24, r25
 282:	88 b9       	out	0x08, r24	; 8
			o_time1=n_time1;	
 284:	2b 82       	std	Y+3, r2	; 0x03
 286:	3c 82       	std	Y+4, r3	; 0x04
 288:	4d 82       	std	Y+5, r4	; 0x05
 28a:	5e 82       	std	Y+6, r5	; 0x06
 28c:	6f 82       	std	Y+7, r6	; 0x07
 28e:	78 86       	std	Y+8, r7	; 0x08
 290:	89 86       	std	Y+9, r8	; 0x09
 292:	9a 86       	std	Y+10, r9	; 0x0a
		}
		if(n_time2-o_time2>200){
 294:	2c 89       	ldd	r18, Y+20	; 0x14
 296:	3b 89       	ldd	r19, Y+19	; 0x13
 298:	4b 2f       	mov	r20, r27
 29a:	5a 2f       	mov	r21, r26
 29c:	6f 2f       	mov	r22, r31
 29e:	7e 2f       	mov	r23, r30
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	ab 84       	ldd	r10, Y+11	; 0x0b
 2a6:	bc 84       	ldd	r11, Y+12	; 0x0c
 2a8:	cd 84       	ldd	r12, Y+13	; 0x0d
 2aa:	de 84       	ldd	r13, Y+14	; 0x0e
 2ac:	ef 84       	ldd	r14, Y+15	; 0x0f
 2ae:	f8 88       	ldd	r15, Y+16	; 0x10
 2b0:	09 89       	ldd	r16, Y+17	; 0x11
 2b2:	1a 89       	ldd	r17, Y+18	; 0x12
 2b4:	0e 94 a0 01 	call	0x340	; 0x340 <__subdi3>
 2b8:	22 2e       	mov	r2, r18
 2ba:	33 2e       	mov	r3, r19
 2bc:	44 2e       	mov	r4, r20
 2be:	55 2e       	mov	r5, r21
 2c0:	66 2e       	mov	r6, r22
 2c2:	77 2e       	mov	r7, r23
 2c4:	88 2e       	mov	r8, r24
 2c6:	99 2e       	mov	r9, r25
 2c8:	28 3c       	cpi	r18, 0xC8	; 200
 2ca:	31 05       	cpc	r19, r1
 2cc:	41 05       	cpc	r20, r1
 2ce:	51 05       	cpc	r21, r1
 2d0:	61 05       	cpc	r22, r1
 2d2:	71 05       	cpc	r23, r1
 2d4:	81 05       	cpc	r24, r1
 2d6:	91 05       	cpc	r25, r1
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <main+0x1b0>
 2da:	18 f0       	brcs	.+6      	; 0x2e2 <main+0x1b0>
			PORTC &= ~(1<<4); //LED 2 OFF	
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	8f 7e       	andi	r24, 0xEF	; 239
 2e0:	88 b9       	out	0x08, r24	; 8
		}
		if(n_time2-o_time2>1000){
 2e2:	22 2d       	mov	r18, r2
 2e4:	33 2d       	mov	r19, r3
 2e6:	44 2d       	mov	r20, r4
 2e8:	55 2d       	mov	r21, r5
 2ea:	66 2d       	mov	r22, r6
 2ec:	77 2d       	mov	r23, r7
 2ee:	88 2d       	mov	r24, r8
 2f0:	99 2d       	mov	r25, r9
 2f2:	28 3e       	cpi	r18, 0xE8	; 232
 2f4:	33 40       	sbci	r19, 0x03	; 3
 2f6:	41 05       	cpc	r20, r1
 2f8:	51 05       	cpc	r21, r1
 2fa:	61 05       	cpc	r22, r1
 2fc:	71 05       	cpc	r23, r1
 2fe:	81 05       	cpc	r24, r1
 300:	91 05       	cpc	r25, r1
 302:	09 f0       	breq	.+2      	; 0x306 <main+0x1d4>
 304:	08 f4       	brcc	.+2      	; 0x308 <main+0x1d6>
 306:	7a cf       	rjmp	.-268    	; 0x1fc <main+0xca>
			PORTC|=(1<<4);  //LED 2 on
 308:	88 b1       	in	r24, 0x08	; 8
 30a:	80 61       	ori	r24, 0x10	; 16
 30c:	88 b9       	out	0x08, r24	; 8
			o_time2=n_time2;	
 30e:	8c 89       	ldd	r24, Y+20	; 0x14
 310:	8b 87       	std	Y+11, r24	; 0x0b
 312:	1b 89       	ldd	r17, Y+19	; 0x13
 314:	1c 87       	std	Y+12, r17	; 0x0c
 316:	bd 87       	std	Y+13, r27	; 0x0d
 318:	ae 87       	std	Y+14, r26	; 0x0e
 31a:	ff 87       	std	Y+15, r31	; 0x0f
 31c:	e8 8b       	std	Y+16, r30	; 0x10
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	89 8b       	std	Y+17, r24	; 0x11
 322:	1a 81       	ldd	r17, Y+2	; 0x02
 324:	1a 8b       	std	Y+18, r17	; 0x12
 326:	6a cf       	rjmp	.-300    	; 0x1fc <main+0xca>

00000328 <__adddi3_s8>:
 328:	00 24       	eor	r0, r0
 32a:	a7 fd       	sbrc	r26, 7
 32c:	00 94       	com	r0
 32e:	2a 0f       	add	r18, r26
 330:	30 1d       	adc	r19, r0
 332:	40 1d       	adc	r20, r0
 334:	50 1d       	adc	r21, r0
 336:	60 1d       	adc	r22, r0
 338:	70 1d       	adc	r23, r0
 33a:	80 1d       	adc	r24, r0
 33c:	90 1d       	adc	r25, r0
 33e:	08 95       	ret

00000340 <__subdi3>:
 340:	2a 19       	sub	r18, r10
 342:	3b 09       	sbc	r19, r11
 344:	4c 09       	sbc	r20, r12
 346:	5d 09       	sbc	r21, r13
 348:	6e 09       	sbc	r22, r14
 34a:	7f 09       	sbc	r23, r15
 34c:	80 0b       	sbc	r24, r16
 34e:	91 0b       	sbc	r25, r17
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
