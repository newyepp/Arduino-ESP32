
No.7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f5  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  00000a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000261  00000000  00000000  000010db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000354  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
#define F_CPU = 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

uint64_t volatile __millis=0;
ISR (TIMER2_COMPA_vect){__millis++;}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  b4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
  b8:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
  bc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_edata+0x4>
  c0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_edata+0x5>
  c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
  c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_edata+0x7>
  cc:	a1 e0       	ldi	r26, 0x01	; 1
  ce:	0e 94 24 01 	call	0x248	; 0x248 <__adddi3_s8>
  d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  d6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  da:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <_edata+0x2>
  de:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <_edata+0x3>
  e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_edata+0x4>
  e6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_edata+0x5>
  ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_edata+0x6>
  ee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_edata+0x7>
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <init_timer2>:

void init_timer2(){
	TCCR2B=(1<<CS22); //System divided by 64 (CLK/64).
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCCR2A|=(1<<WGM21); //autoreload, TCNT2 reset to 0 when reaches OCR2A
 114:	e0 eb       	ldi	r30, 0xB0	; 176
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	TIMSK2=(1<<OCIE2A); //enable interrupt.
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TIFR2=(1<<OCF2A); //clear flag
 124:	87 bb       	out	0x17, r24	; 23
	TCNT2=0x00; //reset counter2
 126:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A=249; //output compare register A (compare value)
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 130:	08 95       	ret

00000132 <main>:
	//initialize timer2, interupt every (1/16000000)*64*1000*(249+1) = 1ms
}

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0x8>
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	uint64_t o_time2,n_time2;
	DDRC=0xFF; // output led
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 b9       	out	0x07, r24	; 7
	sei();
 144:	78 94       	sei
	init_timer2();
 146:	0e 94 87 00 	call	0x10e	; 0x10e <init_timer2>
	o_time2=__millis;
 14a:	20 90 00 01 	lds	r2, 0x0100	; 0x800100 <_edata>
 14e:	30 90 01 01 	lds	r3, 0x0101	; 0x800101 <_edata+0x1>
 152:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <_edata+0x2>
 156:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <_edata+0x3>
 15a:	60 90 04 01 	lds	r6, 0x0104	; 0x800104 <_edata+0x4>
 15e:	70 90 05 01 	lds	r7, 0x0105	; 0x800105 <_edata+0x5>
 162:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <_edata+0x6>
 166:	e9 83       	std	Y+1, r30	; 0x01
 168:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <_edata+0x7>
 16c:	ea 83       	std	Y+2, r30	; 0x02
	n_time2=__millis;
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 172:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 176:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 17a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 17e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_edata+0x4>
 182:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 186:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
 18a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_edata+0x7>
	PORTC |= (1<<0);      //LED2 on
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	81 60       	ori	r24, 0x01	; 1
 192:	88 b9       	out	0x08, r24	; 8
	
	while (1) {
		
		n_time2=__millis ;
 194:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <_edata>
 198:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <_edata+0x1>
 19c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_edata+0x2>
 1a0:	ec 83       	std	Y+4, r30	; 0x04
 1a2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <_edata+0x3>
 1a6:	eb 83       	std	Y+3, r30	; 0x03
 1a8:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_edata+0x4>
 1ac:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <_edata+0x5>
 1b0:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <_edata+0x6>
 1b4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <_edata+0x7>
 1b8:	ed 83       	std	Y+5, r30	; 0x05
		
		if(n_time2-o_time2>200){
 1ba:	28 2d       	mov	r18, r8
 1bc:	39 2d       	mov	r19, r9
 1be:	4c 81       	ldd	r20, Y+4	; 0x04
 1c0:	5b 81       	ldd	r21, Y+3	; 0x03
 1c2:	6b 2f       	mov	r22, r27
 1c4:	7a 2f       	mov	r23, r26
 1c6:	8f 2f       	mov	r24, r31
 1c8:	9e 2f       	mov	r25, r30
 1ca:	a2 2c       	mov	r10, r2
 1cc:	b3 2c       	mov	r11, r3
 1ce:	c4 2c       	mov	r12, r4
 1d0:	d5 2c       	mov	r13, r5
 1d2:	e6 2c       	mov	r14, r6
 1d4:	f7 2c       	mov	r15, r7
 1d6:	09 81       	ldd	r16, Y+1	; 0x01
 1d8:	1a 81       	ldd	r17, Y+2	; 0x02
 1da:	0e 94 30 01 	call	0x260	; 0x260 <__subdi3>
 1de:	a2 2e       	mov	r10, r18
 1e0:	b3 2e       	mov	r11, r19
 1e2:	c4 2e       	mov	r12, r20
 1e4:	d5 2e       	mov	r13, r21
 1e6:	e6 2e       	mov	r14, r22
 1e8:	f7 2e       	mov	r15, r23
 1ea:	08 2f       	mov	r16, r24
 1ec:	19 2f       	mov	r17, r25
 1ee:	28 3c       	cpi	r18, 0xC8	; 200
 1f0:	31 05       	cpc	r19, r1
 1f2:	41 05       	cpc	r20, r1
 1f4:	51 05       	cpc	r21, r1
 1f6:	61 05       	cpc	r22, r1
 1f8:	71 05       	cpc	r23, r1
 1fa:	81 05       	cpc	r24, r1
 1fc:	91 05       	cpc	r25, r1
 1fe:	21 f0       	breq	.+8      	; 0x208 <main+0xd6>
 200:	18 f0       	brcs	.+6      	; 0x208 <main+0xd6>
			PORTC &= ~(1<<4); //LED 2 OFF
 202:	88 b1       	in	r24, 0x08	; 8
 204:	8f 7e       	andi	r24, 0xEF	; 239
 206:	88 b9       	out	0x08, r24	; 8
			
			
		}
		if(n_time2-o_time2>1000){
 208:	2a 2d       	mov	r18, r10
 20a:	3b 2d       	mov	r19, r11
 20c:	4c 2d       	mov	r20, r12
 20e:	5d 2d       	mov	r21, r13
 210:	6e 2d       	mov	r22, r14
 212:	7f 2d       	mov	r23, r15
 214:	80 2f       	mov	r24, r16
 216:	91 2f       	mov	r25, r17
 218:	28 3e       	cpi	r18, 0xE8	; 232
 21a:	33 40       	sbci	r19, 0x03	; 3
 21c:	41 05       	cpc	r20, r1
 21e:	51 05       	cpc	r21, r1
 220:	61 05       	cpc	r22, r1
 222:	71 05       	cpc	r23, r1
 224:	81 05       	cpc	r24, r1
 226:	91 05       	cpc	r25, r1
 228:	09 f0       	breq	.+2      	; 0x22c <main+0xfa>
 22a:	08 f4       	brcc	.+2      	; 0x22e <main+0xfc>
 22c:	b3 cf       	rjmp	.-154    	; 0x194 <main+0x62>
			PORTC|=(1<<4);  //LED 2 on
 22e:	88 b1       	in	r24, 0x08	; 8
 230:	80 61       	ori	r24, 0x10	; 16
 232:	88 b9       	out	0x08, r24	; 8
			o_time2=n_time2;
 234:	28 2c       	mov	r2, r8
 236:	39 2c       	mov	r3, r9
 238:	4c 80       	ldd	r4, Y+4	; 0x04
 23a:	5b 80       	ldd	r5, Y+3	; 0x03
 23c:	6b 2e       	mov	r6, r27
 23e:	7a 2e       	mov	r7, r26
 240:	f9 83       	std	Y+1, r31	; 0x01
 242:	ed 81       	ldd	r30, Y+5	; 0x05
 244:	ea 83       	std	Y+2, r30	; 0x02
 246:	a6 cf       	rjmp	.-180    	; 0x194 <main+0x62>

00000248 <__adddi3_s8>:
 248:	00 24       	eor	r0, r0
 24a:	a7 fd       	sbrc	r26, 7
 24c:	00 94       	com	r0
 24e:	2a 0f       	add	r18, r26
 250:	30 1d       	adc	r19, r0
 252:	40 1d       	adc	r20, r0
 254:	50 1d       	adc	r21, r0
 256:	60 1d       	adc	r22, r0
 258:	70 1d       	adc	r23, r0
 25a:	80 1d       	adc	r24, r0
 25c:	90 1d       	adc	r25, r0
 25e:	08 95       	ret

00000260 <__subdi3>:
 260:	2a 19       	sub	r18, r10
 262:	3b 09       	sbc	r19, r11
 264:	4c 09       	sbc	r20, r12
 266:	5d 09       	sbc	r21, r13
 268:	6e 09       	sbc	r22, r14
 26a:	7f 09       	sbc	r23, r15
 26c:	80 0b       	sbc	r24, r16
 26e:	91 0b       	sbc	r25, r17
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
