
N7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072c  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067d  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000042  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_usart>:
 * Author : New
 */ 
#define F_CPU 16000000UL
//asynchronous operation using polling
#include <avr/io.h>
void init_usart(unsigned long baud){
  80:	9b 01       	movw	r18, r22
  82:	ac 01       	movw	r20, r24
	unsigned int ubrr;
	//Set baud rate, baud=Fosc/(16*(UBRR+1))
	//Set baud rate, baud=Fosc/(8*(UBRR+1)) (2X mode)
	ubrr=(unsigned int)(F_CPU/8/baud)-1;
  84:	60 e8       	ldi	r22, 0x80	; 128
  86:	74 e8       	ldi	r23, 0x84	; 132
  88:	8e e1       	ldi	r24, 0x1E	; 30
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 71 00 	call	0xe2	; 0xe2 <__udivmodsi4>
  90:	21 50       	subi	r18, 0x01	; 1
  92:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
  94:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  98:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Double the USART Transmission Speed
	//to reduce speed error
	UCSR0A = (1<<U2X0);
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	// Enable transmitter and receiver.
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Set frame to 8data, 2stop bit
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
  a8:	8e e0       	ldi	r24, 0x0E	; 14
  aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ae:	08 95       	ret

000000b0 <putUSART>:
}
void putUSART(unsigned char c){
	// Wait for empty transmit buffer.
	while(!(UCSR0A & (1<<UDRE0)) );
  b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b4:	95 ff       	sbrs	r25, 5
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <putUSART>
	UDR0=c;
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  bc:	08 95       	ret

000000be <getUSART>:
}
unsigned char getUSART(void){
	// Wait for data to be received.
	while (!(UCSR0A&(1<<RXC0)));
  be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <getUSART>
	//no checking error bits.
	return UDR0;
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  ca:	08 95       	ret

000000cc <main>:
int main(void){
	init_usart(115200);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	72 ec       	ldi	r23, 0xC2	; 194
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 40 00 	call	0x80	; 0x80 <init_usart>
	while(1){
		//read from terminal then send back.
		putUSART(getUSART());
  d8:	0e 94 5f 00 	call	0xbe	; 0xbe <getUSART>
  dc:	0e 94 58 00 	call	0xb0	; 0xb0 <putUSART>
  e0:	fb cf       	rjmp	.-10     	; 0xd8 <main+0xc>

000000e2 <__udivmodsi4>:
  e2:	a1 e2       	ldi	r26, 0x21	; 33
  e4:	1a 2e       	mov	r1, r26
  e6:	aa 1b       	sub	r26, r26
  e8:	bb 1b       	sub	r27, r27
  ea:	fd 01       	movw	r30, r26
  ec:	0d c0       	rjmp	.+26     	; 0x108 <__udivmodsi4_ep>

000000ee <__udivmodsi4_loop>:
  ee:	aa 1f       	adc	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	ee 1f       	adc	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e4 07       	cpc	r30, r20
  fc:	f5 07       	cpc	r31, r21
  fe:	20 f0       	brcs	.+8      	; 0x108 <__udivmodsi4_ep>
 100:	a2 1b       	sub	r26, r18
 102:	b3 0b       	sbc	r27, r19
 104:	e4 0b       	sbc	r30, r20
 106:	f5 0b       	sbc	r31, r21

00000108 <__udivmodsi4_ep>:
 108:	66 1f       	adc	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	88 1f       	adc	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	1a 94       	dec	r1
 112:	69 f7       	brne	.-38     	; 0xee <__udivmodsi4_loop>
 114:	60 95       	com	r22
 116:	70 95       	com	r23
 118:	80 95       	com	r24
 11a:	90 95       	com	r25
 11c:	9b 01       	movw	r18, r22
 11e:	ac 01       	movw	r20, r24
 120:	bd 01       	movw	r22, r26
 122:	cf 01       	movw	r24, r30
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
